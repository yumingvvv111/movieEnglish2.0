1
00:00:19,760 --> 00:00:26,760
>>Tony Voellm: So next speaker up is Vojta
Jina. He likes funky jazz and he has a very

2
00:00:27,610 --> 00:00:31,700
action packed talk. He is probably going to
run right to the middle or to the end so he

3
00:00:31,700 --> 00:00:37,290
probably won't have questions and we'll just
go right into the next talk after he's done.

4
00:00:37,290 --> 00:00:44,290
So here you go.
Great. Thank you.

5
00:00:47,160 --> 00:00:54,160
>>Vojta Jina: Thanks.
So this conference is about automation and

6
00:00:56,729 --> 00:01:02,479
testing; right? So I assume you guys are one
of those crazy people who try to automate

7
00:01:02,479 --> 00:01:08,820
everything; right?
Even if it takes more time than doing it manually,

8
00:01:08,820 --> 00:01:14,510
we write a script for it because that's what
we believe in; right?

9
00:01:14,510 --> 00:01:20,080
And that's cool. I mean, in this our team,
we are the same. We basically try to automate

10
00:01:20,080 --> 00:01:25,130
everything.
So for simple things like automatic deployment

11
00:01:25,130 --> 00:01:32,120
to the Web site to things like, you know,
we have C.I. server and whenever I push some

12
00:01:32,120 --> 00:01:38,790
code to github, it automatically builds Angular,
runs all the tests on different browsers and

13
00:01:38,790 --> 00:01:45,790
screams at me if it fails. Or every release
has a change log. You know, that's basically

14
00:01:48,360 --> 00:01:55,190
a list of changes, like list of new features,
back fixes, breaking changes. And you know

15
00:01:55,190 --> 00:02:01,450
what? We generate even that. Like we have
a convention for git messages, and then there's

16
00:02:01,450 --> 00:02:06,930
a script that basically generates the script
based on the git history.

17
00:02:06,930 --> 00:02:13,930
Or my favorite is Angular docs. So let me
actually show you the docs. If you go to docs.angularjs.org,

18
00:02:19,780 --> 00:02:25,890
there is Angular documentation, and this is,
for instance, API docs for NG click, which

19
00:02:25,890 --> 00:02:32,049
is a directive in Angular. And down here,
here is an example. Here is the source code

20
00:02:32,049 --> 00:02:36,670
for that example, and then there is a live
preview or like demo where you can actually

21
00:02:36,670 --> 00:02:43,329
play with it and see how it works. Right?
Cool. I mean, of course the whole documentation

22
00:02:43,329 --> 00:02:48,120
is generated automatically.
But the thing I want to show you is the second

23
00:02:48,120 --> 00:02:55,120
tab which says end-to-end test. And that is
basically an example for you how you can possibly

24
00:02:56,379 --> 00:03:02,269
test such a code, like end-to-end test for
that. But what do we do with that, we extract

25
00:03:02,269 --> 00:03:09,269
all these tests, and then we run them as a
part of the build. Let me show you that.

26
00:03:09,430 --> 00:03:14,579
So it looks something like this.
And you can see, it's basically going through

27
00:03:14,579 --> 00:03:20,659
the whole documentation and checking whether
all these examples still works. And this is

28
00:03:20,659 --> 00:03:25,499
really awesome, because before we did this,
it would be, like, all the time it would happen,

29
00:03:25,499 --> 00:03:30,730
like someone would email me, like, hey,man,
your docs example for HTTP doesn't work. And

30
00:03:30,730 --> 00:03:36,569
I would be like, oh, cool, I didn't even though
that was an example for that. But now with

31
00:03:36,569 --> 00:03:40,469
this, you don't have to think about it. Like
if -- And if you break it, it will scream

32
00:03:40,469 --> 00:03:47,269
at you.
So we basically try to automate everything.

33
00:03:47,269 --> 00:03:53,669
Let me kill this guy.
And we do testing a lot. We rely on testing

34
00:03:53,669 --> 00:03:59,590
a lot. And, therefore, we want to make sure
that our testing story is really efficient.

35
00:03:59,590 --> 00:04:04,260
And that's pretty much why we did Karma, which
is, I would say, a test runner that fits our

36
00:04:04,260 --> 00:04:09,879
needs because we made it for ourselves. And
that's what I want to show you now. I want

37
00:04:09,879 --> 00:04:16,879
to show you this test runner that we use to
test Angular and pretty much to test any JavaScript.

38
00:04:17,639 --> 00:04:24,639
So let's do demo.
So Karma is an MPM package so assuming you

39
00:04:26,510 --> 00:04:33,510
have no JS, you can install it through MPM
install Karma. And then first thing you need

40
00:04:33,949 --> 00:04:38,780
in order to start, you need a configuration
file, which is basically for Karma to know

41
00:04:38,780 --> 00:04:44,280
about your project, basically where the files
of the project, what browsers you want to

42
00:04:44,280 --> 00:04:47,750
use, which testing framework you are using
and stuff like that.

43
00:04:47,750 --> 00:04:53,120
To make it simple, you can generate -- you
can generate this config file by Karma in

44
00:04:53,120 --> 00:04:59,000
it and it will ask you a couple questions
like what testing framework you want use,

45
00:04:59,000 --> 00:05:05,230
and which browsers and stuff like that.
And it will generate the config file for you.

46
00:05:05,230 --> 00:05:10,570
Or if you are using Grunt -- do you guys know
GruntJS? It's a really awesome task runner

47
00:05:10,570 --> 00:05:16,220
for JavaScript. So if you are using Grunt,
there is a Grunt plug-in for Karma that allows

48
00:05:16,220 --> 00:05:19,970
you to configure Karma through Grunt and you
don't need this configuration file at all.

49
00:05:19,970 --> 00:05:26,970
All right. For this demo, I'm going to be
using Angular code base which already has

50
00:05:29,230 --> 00:05:36,230
this config file. So we can start it.
I can do Karma start, and what's happening

51
00:05:39,110 --> 00:05:44,900
in the background, it starts a browser that
I told in the config file that I want to be

52
00:05:44,900 --> 00:05:50,230
using, and, you know, we can forget about
the browser for now. But the important thing

53
00:05:50,230 --> 00:05:56,490
is that there is a real browser in the background
that Karma will use to actually execute the

54
00:05:56,490 --> 00:06:01,889
task. And that's something I want to actually
talk about because, you know, you can execute

55
00:06:01,889 --> 00:06:06,860
-- you can test JavaScript even without browsers.
You can do like NodeJS and Rhino, but for

56
00:06:06,860 --> 00:06:12,120
us it was really crucial to use real browsers
because if you know Angular theirs there's

57
00:06:12,120 --> 00:06:17,110
tons of components and custom directives and
stuff, and it's there are DOM manipulations

58
00:06:17,110 --> 00:06:23,190
and we need to DOM API. We need to test these
things, so we need real browser for that.

59
00:06:23,190 --> 00:06:30,190
Plus, there are so many inconsistencies between
browsers, and JavaScript itself as a language,

60
00:06:30,380 --> 00:06:35,340
it's not that bad it's pretty consistent,
but the DOM API, that's where most of the

61
00:06:35,340 --> 00:06:40,170
issues are. So again, for us, we need real
browsers.

62
00:06:40,170 --> 00:06:47,170
Plus, third thing, there is good advantage,
once you are using real browsers, it basically

63
00:06:47,640 --> 00:06:53,110
communicates through HTTP and Web circuits,
so it means you can use any browser, like

64
00:06:53,110 --> 00:07:00,110
you can test your phone, your tablet, TV,
play station, whatever you want.

65
00:07:00,400 --> 00:07:05,240
Okay.
Let's go to source code.

66
00:07:05,240 --> 00:07:10,060
And another thing that's happening in the
background is that Karma is now watching all

67
00:07:10,060 --> 00:07:16,370
the source files of my project. And whenever
I -- here is like cache factory and service

68
00:07:16,370 --> 00:07:21,590
in Angular, it's not that important what it
is, but I am going to save the file. Just

69
00:07:21,590 --> 00:07:28,150
press command S and you can see that Karma
immediately see that and starts executing

70
00:07:28,150 --> 00:07:33,280
all the tests.
And you can see it executed over 1800 of unit

71
00:07:33,280 --> 00:07:39,900
test in, like, three seconds on the real browser;
right?

72
00:07:39,900 --> 00:07:45,670
And I mean, three seconds is not bad, but
if you have huge project, it can be more.

73
00:07:45,670 --> 00:07:50,580
And our goal is to get this instant feedback
so that I can run these tests all the time,

74
00:07:50,580 --> 00:07:54,690
because what I really do during development
is, like, I want to run these tests on every

75
00:07:54,690 --> 00:08:01,690
save. And that's why we have this feature,
we call it D describe in i8. Do you know,

76
00:08:03,930 --> 00:08:08,389
on the right side, that's my test.
I'm not sure if you recognize the syntax.

77
00:08:08,389 --> 00:08:15,150
It's a Jasmine testing framework. So I should
mention that Karma is agnostic of testing

78
00:08:15,150 --> 00:08:19,480
framework. You can use it with any testing
framework you like, pretty much. There is

79
00:08:19,480 --> 00:08:26,000
adapter for Qunit, Mocha, Jasmine, Node unit
and stuff. We are using Jasmine. That's why

80
00:08:26,000 --> 00:08:31,530
this example is in Jasmine, but you can use
anything else. And describe in Jasmine basically

81
00:08:31,530 --> 00:08:38,530
means like defining a test suite, a list of
suites, and it means defining a single test.

82
00:08:38,919 --> 00:08:43,979
And what I can do, I can focus these things,
so I can put D describe, and now when I say,

83
00:08:43,979 --> 00:08:49,950
if you can see, it immediately executes just
this suite. So it's even faster; right? Like

84
00:08:49,950 --> 00:08:55,529
now it executed only 24 of these 1800 unit
tests and it was like, I don't know, a few

85
00:08:55,529 --> 00:09:00,710
milliseconds.
And so the goal isn't -- The thing why this

86
00:09:00,710 --> 00:09:07,710
is important is that it gives, like, a new
work flow. It's basically like using test

87
00:09:07,750 --> 00:09:12,110
as a development work flow, where you basically,
you can stay -- you can stay in your text

88
00:09:12,110 --> 00:09:16,360
editor and you don't have to move back and
forth within browser and your text editor

89
00:09:16,360 --> 00:09:23,360
to see how things work. Because what I can
do, let's say in this test I can do, I don't

90
00:09:24,420 --> 00:09:31,420
know, console.log, cache 1, whatever it is,
maybe give me size. It gives me error, undefined,

91
00:09:35,870 --> 00:09:42,870
whatever. So there is no size. So I guess
theirs there's info. Right.

92
00:09:44,029 --> 00:09:49,710
And the thing is that I just saved the file
and I immediately see in the console the result

93
00:09:49,710 --> 00:09:53,610
from the real browser. So I don't have to
go to the browser to do these things, you

94
00:09:53,610 --> 00:09:57,899
know. And this is really important for the
work flow because you can stay in the browser

95
00:09:57,899 --> 00:10:04,899
-- sorry, in the text editor.
One more thing that I want to mention is that

96
00:10:10,080 --> 00:10:14,840
there is no -- there's no support from text
editor. Like I'm using Sublime. You can use

97
00:10:14,840 --> 00:10:18,700
EMACS, Vim, whatever you want, because the
only thing the text editor in this work flow

98
00:10:18,700 --> 00:10:25,110
does is saving files.
And I've got one more thing I want to show

99
00:10:25,110 --> 00:10:32,110
you, and that's debugging. Because what I
can do, I can, inside this code, if I want

100
00:10:35,550 --> 00:10:42,550
to actually use real debugger, I can do this,
and guess what? I can go to the browser that

101
00:10:46,880 --> 00:10:50,790
I have somewhere in background and I have
debugger, you know? I can watch werewolves,

102
00:10:50,790 --> 00:10:56,089
I can see call stack, I can step into functions.
And this is something, this is not feature

103
00:10:56,089 --> 00:11:00,580
of Karma. That's just the browser have. Like
most of the modern browsers, they have debuggers,

104
00:11:00,580 --> 00:11:06,690
so it only allows you to use that. And again,
you don't need any support from the text editor

105
00:11:06,690 --> 00:11:10,620
to do that.
If you happen to using something like Web

106
00:11:10,620 --> 00:11:16,540
Storm or some better IDEs, you can even configure
it to do this debugging directly from Web

107
00:11:16,540 --> 00:11:21,880
Storm so you can put break points and stuff,
and you even don't have to leave your IDE

108
00:11:21,880 --> 00:11:28,880
for debugging.
All right. I think that's -- You know, there

109
00:11:33,610 --> 00:11:39,170
is tons of other features, like it can do
code coverage, it can preprocess files so

110
00:11:39,170 --> 00:11:42,839
that you can develop -- like you can use coffee
script and it will compile coffee script on

111
00:11:42,839 --> 00:11:49,839
the fly. There's a Dart plug-in for testing
Dart. All kinds of other plug-ins. But I think

112
00:11:50,920 --> 00:11:56,870
the most important feature is the work flow,
that you can run tests and instantly see and

113
00:11:56,870 --> 00:11:59,910
instantly get the feedback. So that's the
main thing so that's what I wanted to show

114
00:11:59,910 --> 00:12:04,000
you.
If you like it, you can go to github, check

115
00:12:04,000 --> 00:12:07,529
it out. It's open source, so send us pull
request.

116
00:12:07,529 --> 00:12:13,480
And, as I said -- we're probably running time
pretty soon, so I'm not sure if we're going

117
00:12:13,480 --> 00:12:19,339
to have questions, but I'm going to be here
today and whole tomorrow so find me and I'm

118
00:12:19,339 --> 00:12:22,450
more than happy to talk to you guys about
pretty much anything.

119
00:12:22,450 --> 00:12:28,180
>>Tony Voellm: Thank you, VOJTA. Actually,
I think we may have time for one question.

120
00:12:28,180 --> 00:12:31,560
[ Applause ]
>>Tony Voellm: I have to say I was really

121
00:12:31,560 --> 00:12:37,380
happy that you only typed Karma start and
you never typed Karma end. I was a little

122
00:12:37,380 --> 00:12:39,040
worried if that was going to happen because
--

123
00:12:39,040 --> 00:12:46,040
>>Vojta Jina: Oh, well, I do control.
>>Tony Voellm: We can take a live question

124
00:12:47,580 --> 00:12:54,080
if someone has a live question, or we can
go to the Dory. Or we can move ahead.

125
00:12:54,080 --> 00:12:59,029
Okay. I've got a question here, the number
one question. You probably saw this, actually,

126
00:12:59,029 --> 00:13:03,700
in the UI too. It says why was Karma renamed
from Testacular.

127
00:13:03,700 --> 00:13:08,870
>>Vojta Jina: Okay. I didn't expect that question
at all.

128
00:13:08,870 --> 00:13:14,020
[ Laughter ]
>>Vojta Jina: I don't think I want to answer

129
00:13:14,020 --> 00:13:15,640
this question --
[ Laughter ]

130
00:13:15,640 --> 00:13:22,640
>>Vojta Jina: -- on the stage, but the good
thing is that now typing Karma is way faster

131
00:13:23,440 --> 00:13:29,920
than Testacular, because especially if you
are using regular keyboard layout it's really

132
00:13:29,920 --> 00:13:31,620
easy to type.
[ Laughter ]

133
00:13:31,620 --> 00:13:35,899
>>Tony Voellm: Great. All right. Thank you,
VOJTA.

134
00:13:35,899 --> 00:13:40,740
>>Vojta Jina: Actually, can I -- I think I
would like to -- I would like to close this

135
00:13:40,740 --> 00:13:43,740
with a quick story. I think we have two minutes
so I can do that.

136
00:13:43,740 --> 00:13:47,580
>>Tony Voellm: 30 seconds.
>>Vojta Jina: 30 seconds? I will do it quickly

137
00:13:47,580 --> 00:13:54,580
because I am really happy about that thing.
There's a project called YouTube on TV. It's

138
00:13:54,930 --> 00:13:59,779
basically if you have play station 3 there's
a YouTube app and it's written in Angular,

139
00:13:59,779 --> 00:14:05,170
and a few months ago we were helping the team
to debug some performance issues and I noticed

140
00:14:05,170 --> 00:14:12,060
that they had, like, 90 or 100 unit tests.
And I was like, wow, that's not many. So I

141
00:14:12,060 --> 00:14:17,589
asked them, guys, why don't you write more
tests? And when they showed me, like, how

142
00:14:17,589 --> 00:14:24,160
painful it was to, like, add a new test in
their suite and how slow it was to run these

143
00:14:24,160 --> 00:14:30,279
tests, I was kind of like, okay, I understand
that. And so the next week I helped them to

144
00:14:30,279 --> 00:14:34,350
set up their environment with Karma and we
actually set it up to run it on real play

145
00:14:34,350 --> 00:14:40,980
station and it was really cool because in
a few days, maybe a week I got an email from

146
00:14:40,980 --> 00:14:46,750
Tyler, one guy from team, and he was, like,
"Vojta, this shit is awesome! Like, it completely

147
00:14:46,750 --> 00:14:52,790
changed our life. We test drive everything
now!" And believe me or not, but after a week

148
00:14:52,790 --> 00:14:57,209
or something, they had over 400 unit tests.
So it basically took them about a year to

149
00:14:57,209 --> 00:15:03,670
write 100 tests, and then they basically wrote
300 tests in just a few days.

150
00:15:03,670 --> 00:15:09,670
And the point is that, you know, you should
spend time figuring out your work flow and

151
00:15:09,670 --> 00:15:14,100
your environment. Find the right tools for
you. It doesn't have to be Karma. I don't

152
00:15:14,100 --> 00:15:18,410
care. Use whatever works for you guys. But
it's so much worth it to spend the time because

153
00:15:18,410 --> 00:15:25,160
once you do it, it will save you tons of time.
Cool. So thank you.

154
00:15:25,160 --> 00:15:29,529
>>Tony Voellm: Thank you. Thank you.
[ Applause ]

